datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Student {
  id           Int         @id @default(autoincrement())
  name         String
  age          Int
  isActive     Boolean
  createdAt    DateTime    @default(now())
  kiberones    Kiberone[]
  courator     Courator    @relation(fields: [couratorId], references: [id])
  couratorId   Int?
  group        Group?      @relation(fields: [groupId], references: [id]) // Добавляем противоположное поле отношения на модель Group
  groupId      Int?
}

model Courator {
  id           Int         @id @default(autoincrement())
  name         String
  createdAt    DateTime    @default(now())
  groups       Group[]
  students     Student[]   // Обратное поле отношения для связи с моделью Student
  kiberones    Kiberone[]  // Обратное поле отношения для связи с моделью Kiberone
}

model Group {
  id           Int         @id @default(autoincrement())
  name         String
  description  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  students     Student[]
  courator     Courator    @relation(fields: [couratorId], references: [id])
  couratorId   Int
}

model Kiberone {
  id           Int         @id @default(autoincrement())
  amount       Int
  student      Student     @relation(fields: [studentId], references: [id])
  studentId    Int
  courator     Courator    @relation(fields: [couratorId], references: [id])
  couratorId   Int
  reason       String
  status       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
}
