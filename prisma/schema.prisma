datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Courator {
  id           Int         @id @default(autoincrement())
  name         String
  groups       Group[]
  students     Student[]   // Обратное поле отношения для связи с моделью Student
  kiberones    Kiberone[]  // Обратное поле отношения для связи с моделью Kiberone
  createdAt    DateTime    @default(now())
}

model Group {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  students     Student[]
  courator     Courator?   @relation(fields: [couratorId], references: [id])
  couratorId   Int?
  homework     Homework[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
}

model Kiberone {
  id           Int         @id @default(autoincrement())
  amount       Int         
  student      Student     @relation(fields: [studentId], references: [id])
  studentId    Int
  courator     Courator?    @relation(fields: [couratorId], references: [id])
  couratorId   Int?
  reason       String
  isApproved   Boolean
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
}

model Parent {
  id           Int         @id @default(autoincrement())
  name         String
  login        String
  password     String
  students     Student[]
  pollResults  PollResults[]
  createdAt    DateTime    @default(now())
}

model Student {
  id           Int         @id @default(autoincrement())
  name         String
  age          Int
  login        String
  password     String
  isActive     Boolean
  kiberones    Kiberone[]
  courator     Courator?    @relation(fields: [couratorId], references: [id])
  couratorId   Int?
  group        Group      @relation(fields: [groupId], references: [id])
  groupId      Int
  parent       Parent?     @relation(fields: [parentId], references: [id])
  parentId     Int?
  TestsResult  TestsResult[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
}

model Limits {
  id          Int         @id @default(autoincrement())
  name        String
  limits      Int[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}


model Tests {
  id          Int         @id @default(autoincrement())
  name        String
  questions   String[]
  correctAnswer    Int
  deadline    DateTime
  TestResults TestsResult[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model TestsResult {
  id         Int         @id @default(autoincrement())
  student    Student     @relation(fields: [studentId], references: [id])
  studentId  Int
  test       Tests       @relation(fields: [testId], references: [id])
  testId     Int
  isCorrect   Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Polls {
  id          Int         @id @default(autoincrement())
  name        String
  questions   String[]
  PollResults PollResults[]
  deadline    DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model PollResults {
  id         Int         @id @default(autoincrement())
  parent     Parent     @relation(fields: [parentId], references: [id])
  parentId   Int
  poll       Polls       @relation(fields: [pollId], references: [id])
  pollId     Int
  answersIndex Int 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Homework {
  id          Int         @id @default(autoincrement())
  title        String
  deadline    DateTime
  files       String[]
  group       Group       @relation(fields: [groupId], references: [id])
  groupId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}